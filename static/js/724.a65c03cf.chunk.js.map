{"version":3,"file":"static/js/724.a65c03cf.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsListItem/ContactsListItem.module.css?89f9","components/ContactsList/ContactsListItem/ContactsListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsFilter/ContactsFilter.module.css?d01d","components/ContactsFilter/ContactsFilter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactForm_section__Yogoh\",\"title\":\"ContactForm_title__jZguf\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n} from 'contactsStorage/contactsAPI';\nimport Notiflix from 'notiflix';\n\nimport styles from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [form, setForm] = useState({ name: '', number: '' });\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact, { isSuccess, isLoading }] = useAddContactMutation();\n\n  const handleChange = element => {\n    const { name, value } = element.currentTarget;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = element => {\n    element.preventDefault();\n    const data = { id: nanoid(), ...form };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      inputClean();\n      return Notiflix.Notify.failure(`${data.name} is already in phonebook`);\n    }\n    addContact(data);\n  };\n\n  const inputClean = () => {\n    setForm({ name: '', number: '' });\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      inputClean();\n    }\n  }, [isSuccess]);\n\n  const { name, number } = form;\n  return (\n    <div className={styles.section}>\n      <h2 className={styles.title}>Add contacts to phone book</h2>\n      <form onSubmit={handleSubmit}>\n        <label className={styles.label}>\n          Name\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={styles.button} disabled={isLoading}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsListItem_item__VnwkN\",\"name\":\"ContactsListItem_name__jhG1M\",\"number\":\"ContactsListItem_number__jtk+m\",\"button\":\"ContactsListItem_button__gfbnW\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'contactsStorage/contactsAPI';\n\nimport styles from './ContactsListItem.module.css';\n\nexport const ContactsListItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\n\n  return (\n    <li id={id} className={styles.item}>\n      <span className={styles.name}>{name}</span>:{' '}\n      <span className={styles.number}>{number}</span>\n      <button\n        className={styles.button}\n        onClick={() => deleteContact(id)}\n        disabled={isLoading}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsList_section__IE6+j\",\"title\":\"ContactsList_title__Nc-fb\",\"list\":\"ContactsList_list__mmE3Y\",\"text\":\"ContactsList_text__URA4K\"};","import { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'contactsStorage/contactsAPI';\nimport { Rings } from 'react-loader-spinner';\nimport { ContactsListItem } from './ContactsListItem';\n\nimport styles from './ContactsList.module.css';\n\nexport const ContactsList = () => {\n  const { data: contacts, isLoading, isSuccess } = useGetContactsQuery();\n  const filter = useSelector(state => state.filter);\n\n  const getContacts = () => {\n    if (filter === '') {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const items = getContacts();\n  return (\n    <div className={styles.section}>\n      <h2 className={styles.title}>Phone book</h2>\n      <ul className={styles.list}>\n        {isLoading && (\n          <div className={styles.loader}>\n            <Rings\n              height=\"200\"\n              width=\"200\"\n              color=\"#0031f9\"\n              ariaLabel=\"loading\"\n            />\n          </div>\n        )}\n        {isSuccess &&\n          items.map(({ id, name, number }) => (\n            <ContactsListItem key={id} id={id} name={name} number={number} />\n          ))}\n        {items && items.length === 0 && (\n          <span className={styles.text}> Phone book is empty </span>\n        )}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsFilter_section__4Ctst\",\"title\":\"ContactsFilter_title__G0Uie\",\"input\":\"ContactsFilter_input__8nlWg\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'contactsStorage/contactsSlice';\n\nimport styles from './ContactsFilter.module.css';\n\nexport const ContactsFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter);\n\n  const onChange = element => {\n    dispatch(changeFilter(element.currentTarget.value));\n  };\n\n  return (\n    <div className={styles.section}>\n      <h2 className={styles.title}>Find contacts by name</h2>\n      <input\n        className={styles.input}\n        onChange={onChange}\n        value={filter}\n      ></input>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactsList } from 'components/ContactsList';\nimport { ContactsFilter } from 'components/ContactsFilter';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <ContactForm />\n      <ContactsFilter />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","number","form","setForm","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isSuccess","isLoading","handleChange","element","currentTarget","value","prevForm","inputClean","useEffect","className","styles","onSubmit","preventDefault","find","contact","toLowerCase","Notiflix","type","pattern","title","required","onChange","disabled","ContactsListItem","useDeleteContactMutation","deleteContact","onClick","ContactsList","filter","useSelector","state","items","includes","height","width","color","ariaLabel","map","length","ContactsFilter","dispatch","useDispatch","changeFilter","ContactsPage"],"sourceRoot":""}